const redis = require("redis");

class RedisClient {
  constructor() {
    this.client = null;
    this.isConnected = false;
  }

  async connect() {
    try {
      this.client = redis.createClient({
        // URL format ho·∫∑c object config
        url:
          process.env.REDIS_URL ||
          `redis://${process.env.REDIS_HOST || "localhost"}:${process.env.REDIS_PORT || 6379}`,

        // Database selection
        database: parseInt(process.env.REDIS_DB || "0"),

        // Password authentication
        password: process.env.REDIS_PASSWORD || undefined,

        // Socket configuration (thay th·∫ø retry_strategy)
        socket: {
          // Reconnect strategy - thay th·∫ø retry_strategy
          reconnectStrategy: (retries) => {
            // Gi·ªõi h·∫°n s·ªë l·∫ßn retry
            if (retries > 10) {
              console.error("‚ùå Redis: Too many retry attempts, giving up");
              return new Error("Too many retry attempts");
            }

            // T√≠nh to√°n delay (exponential backoff v·ªõi max 3s)
            const delay = Math.min(retries * 100, 3000);
            console.log(
              `üîÑ Redis: Attempting to reconnect in ${delay}ms (attempt ${retries})`
            );
            return delay;
          },

          // Connection timeout
          connectTimeout: 10000, // 10 seconds
          // N·∫øu trong 10s server redis kh√¥ng ph·∫£n h·ªìi (v√≠ d·ª• m·∫°ng ch·∫≠m, server kh√¥ng reachable),
          // client s·∫Ω t·ª´ b·ªè k·∫øt n·ªëi v√† tr·∫£ v·ªÅ l·ªói.

          // Command timeout
          commandTimeout: 5000, // 5 seconds
          // Th·ªùi gian t·ªëi ƒëa ch·ªù m·ªôt l·ªánh Redis (GET, SET, v.v.) tr·∫£ v·ªÅ k·∫øt qu·∫£.
          // N·∫øu Redis kh√¥ng ph·∫£n h·ªìi trong kho·∫£ng ƒë√≥, l·ªánh b·ªã hu·ª∑ v·ªõi l·ªói timeout.

          // Keep alive
          keepAlive: true,
          // Gi·ªØ k·∫øt n·ªëi lu√¥n m·ªü ƒë·ªÉ tr√°nh overhead c·ªßa vi·ªác t·∫°o k·∫øt n·ªëi m·ªõi li√™n t·ª•c.

          // No delay for keep alive
          noDelay: true,
          // V√¥ hi·ªáu h√≥a Nagle‚Äôs algorithm. M·∫∑c ƒë·ªãnh TCP gom nhi·ªÅu g√≥i nh·ªè l·∫°i ƒë·ªÉ g·ª≠i ch·∫≠m (gi·∫£m overhead).
          // noDelay: true nghƒ©a l√† g·ª≠i ngay l·∫≠p t·ª©c, gi·∫£m latency cho c√°c payload nh·ªè.
        },

        // Legacy mode ƒë·ªÉ h·ªó tr·ª£ m·ªôt s·ªë t√≠nh nƒÉng c≈© n·∫øu c·∫ßn(m·∫∑c ƒë·ªãnh l√† false)
        legacyMode: false,
        // x√†i async/await t·ª± nhi√™n kh√¥ng c·∫ßn callback nh∆∞ c≈©
      });

      // Event listeners
      this.client.on("connect", () => {
        console.log("üîó Redis: Connecting...");
      });

      this.client.on("ready", () => {
        console.log("‚úÖ Redis: Connected and ready!");
        this.isConnected = true;
      });

      this.client.on("error", (err) => {
        console.error("‚ùå Redis connection error:", err.message);
        this.isConnected = false;
      });

      this.client.on("end", () => {
        console.log("üîå Redis: Connection ended");
        this.isConnected = false;
      });

      this.client.on("reconnecting", () => {
        console.log("üîÑ Redis: Attempting to reconnect...");
        this.isConnected = false;
      });

      // Connect to Redis
      await this.client.connect();
    } catch (error) {
      console.error("‚ùå Failed to connect to Redis:", error.message);
      this.isConnected = false;

      // Kh√¥ng throw error ƒë·ªÉ app v·∫´n ch·∫°y ƒë∆∞·ª£c m√† kh√¥ng c√≥ Redis
      // throw error; // Comment n√†y ƒë·ªÉ app fallback
    }
  }

  async disconnect() {
    try {
      if (this.client && this.client.isOpen) {
        await this.client.quit();
        console.log("üëã Redis: Disconnected gracefully");
      }
    } catch (error) {
      console.error("Error disconnecting Redis:", error.message);
    } finally {
      this.isConnected = false;
      this.client = null;
    }
  }

  // Check connection status
  isReady() {
    return this.client && this.client.isReady && this.isConnected;
  }

  // Wrapper methods v·ªõi error handling
  async get(key) {
    if (!this.isReady()) {
      console.warn("‚ö†Ô∏è Redis not ready, returning null for key:", key);
      return null;
    }

    try {
      const result = await this.client.get(key);
      return result;
    } catch (error) {
      console.error("‚ùå Redis GET error:", error.message);
      return null;
    }
  }

  async set(key, value, ttl = 300) {
    if (!this.isReady()) {
      console.warn("‚ö†Ô∏è Redis not ready, skipping SET for key:", key);
      return false;
    }

    try {
      // setEx method v·ªõi TTL
      await this.client.setEx(key, ttl, value);
      return true;
    } catch (error) {
      console.error("‚ùå Redis SET error:", error.message);
      return false;
    }
  }

  async del(key) {
    if (!this.isReady()) {
      console.warn("‚ö†Ô∏è Redis not ready, skipping DEL for key:", key);
      return false;
    }

    try {
      const result = await this.client.del(key);
      return result > 0;
    } catch (error) {
      console.error("‚ùå Redis DEL error:", error.message);
      return false;
    }
  }

  async exists(key) {
    if (!this.isReady()) {
      return false;
    }

    try {
      const result = await this.client.exists(key);
      return result === 1;
    } catch (error) {
      console.error("‚ùå Redis EXISTS error:", error.message);
      return false;
    }
  }

  async incr(key) {
    if (!this.isReady()) {
      console.warn("‚ö†Ô∏è Redis not ready, skipping INCR for key:", key);
      return 0;
    }

    try {
      const result = await this.client.incr(key);
      return result;
    } catch (error) {
      console.error("‚ùå Redis INCR error:", error.message);
      return 0;
    }
  }

  // Pattern ƒë·ªÉ delete nhi·ªÅu keys c√πng l√∫c
  async deletePattern(pattern) {
    if (!this.isReady()) {
      console.warn("‚ö†Ô∏è Redis not ready, skipping DELETE PATTERN:", pattern);
      return false;
    }

    try {
      // S·ª≠ d·ª•ng SCAN thay v√¨ KEYS ƒë·ªÉ an to√†n h∆°n trong production
      const keys = [];
      for await (const key of this.client.scanIterator({
        MATCH: pattern,
        COUNT: 100,
      })) {
        keys.push(key);
      }

      if (keys.length > 0) {
        await this.client.del(keys);
        console.log(
          `üóëÔ∏è Deleted ${keys.length} keys matching pattern: ${pattern}`
        );
      }

      return true;
    } catch (error) {
      console.error("‚ùå Redis DELETE PATTERN error:", error.message);
      return false;
    }
  }

  // Th√™m method ƒë·ªÉ get th√¥ng tin Redis
  async getInfo() {
    if (!this.isReady()) {
      return { status: "disconnected" };
    }

    try {
      const info = await this.client.info();
      const memory = await this.client.info("memory");

      return {
        status: "connected",
        info: this.parseRedisInfo(info),
        memory: this.parseRedisInfo(memory),
      };
    } catch (error) {
      console.error("‚ùå Error getting Redis info:", error.message);
      return { status: "error", message: error.message };
    }
  }

  // Helper ƒë·ªÉ parse Redis INFO response
  parseRedisInfo(infoString) {
    const info = {};
    const lines = infoString.split("\r\n");

    for (const line of lines) {
      if (line && !line.startsWith("#") && line.includes(":")) {
        const [key, value] = line.split(":");
        info[key] = value;
      }
    }

    return info;
  }

  // Health check method
  async healthCheck() {
    try {
      if (!this.isReady()) {
        return { healthy: false, message: "Redis not connected" };
      }

      const testKey = "health_check";
      const testValue = Date.now().toString();

      // Test write
      await this.client.setEx(testKey, 10, testValue);

      // Test read
      const result = await this.client.get(testKey);

      // Clean up
      await this.client.del(testKey);

      const healthy = result === testValue;
      return {
        healthy,
        message: healthy ? "Redis is healthy" : "Redis read/write test failed",
        latency: Date.now() - parseInt(testValue),
      };
    } catch (error) {
      return {
        healthy: false,
        message: `Redis health check failed: ${error.message}`,
      };
    }
  }
}

const redisClient = new RedisClient();
module.exports = redisClient;
